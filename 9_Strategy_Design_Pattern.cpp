//? Behavioral Design Pattern 
//* Strategy Design Pattern -> The Strategy Design Pattern is a behavioral design pattern that defines a family of algorithms or strategies, encapsulates each one, and makes them interchangeable. The idea is that a client can choose the strategy it wants to use at runtime, without changing the code that uses the strategy.

//? In simpler terms, it allows you to select different ways (strategies) of doing something depending on the situation, and you can change your approach without modifying the classes that use it.


//todo Example -> Imagine you are going on a trip and you need to decide how to get to your destination. You can choose between walking, taking a bike, or driving a car. These are different strategies for getting to the same place. Depending on the situation (e.g., distance, weather, time), you pick one of these strategies.

//todo   - In software, the Strategy Pattern allows you to easily switch between different strategies (like walking, biking, or driving) without changing the code that uses them.


//* The Strategy Design Pattern is useful when you need to select an algorithm or behavior dynamically. It provides flexibility, reduces complexity, and promotes code reuse. Itâ€™s like having different strategies to approach a problem and being able to switch between them easily without changing the rest of the system.